plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com".movies_blog'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

bootJar {
    enabled = false
}

jar {
    enabled = true
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':movies_common')
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-stream:4.0.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

task createScripts {
    group = 'Build'
    description = 'Creates the shell and batch scripts to run the application'
    doLast {
        def jarFile = "${buildDir}/libs/${project.name}-${version}.jar"

        // Create the scripts directory if it doesn't exist
        def scriptsDir = new File("${buildDir}/scripts")
        if (!scriptsDir.exists()) {
            scriptsDir.mkdirs()
        }

        // Create the shell script
        def shScript = new File(scriptsDir, "run.sh")
        shScript.text = "#!/bin/sh\njava -jar ${jarFile}\n"
        shScript.setExecutable(true)

        // Create the batch script
        def batScript = new File(scriptsDir, "run.bat")
        batScript.text = "@echo off\njava -jar ${jarFile}\n"
    }
}

build.dependsOn createScripts